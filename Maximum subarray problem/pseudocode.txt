Algoritmo cubico

Input: A[1..N] array di N numeri reali
Output: la somma massima trovata in ogni sottosequenza contigua dell'array.

MaxSoFar = 0

for i = 1 to N do
    //Esploro tutte le sottosequenze che partono da i
    for j = i to N do
        sum = 0

        for k = i to j do
            sum = sum + A[k]
        
        MaxSoFar = max(MaxSoFar, sum)

Analisi: O(N^3) confronti, O(1) spazio.

Algoritmo O(N^2) tempo e O(1) spazio

MaxSoFar = 0

for i = 1 to N do
    sum = 0
    for j = i to N do
        sum = sum + A[j]
        MaxSoFar = max(MaxSoFar, sum)

Algoritmo O(N^2) tempo e O(N) spazio

//inizializza CumArray
CumArray[0] = 0;

for i = 1:N do
    CumArray[i] = CumArray[i-1] + X[i]

MaxSoFar = 0;

for i = 1 to N do
    for j = i to N do
        //calcola la somma degli elementi A[i...j]
        sum = CumArray[j]-CumArray[i-1]
        MaxSoFar = max(MaxSoFar, sum)

        